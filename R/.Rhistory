welfare$gender <- ifelse(welfare$gender==1,"male","female")
table(welfare$gender)
ggplot(welfare,aes(x=gender,fill=gender))+geom_bar
ggplot(welfare,aes(x=gender,fill=gender))+geom_bar()
# 남여별 평균임금을 구하세요
welfare %>% group_by(gender) %>%
summarise(mean(gender))
# 남여별 평균임금을 구하세요
names(welfare)
welfare %>% group_by(gender) %>%
summarise(mean(income))
welfare %>% group_by(gender) %>%
summarise(mean(income,na.rm=T))
data <- welfare %>% group_by(gender) %>%
summarise(mean(income,na.rm=T))
ggplot(data,aes(gender,mean))+geom_freqpoly()
ggplot(data,aes(gender,mean))+geom_label()
ggplot(data,aes(gender,mean))+geom_col()
ggplot(data,aes(gender,mean))+geom_col()
data <- welfare %>% group_by(gender) %>%
summarise(mean(income,na.rm=T)) %>%
ggplot(aes(gender,mean))+geom_col()
welfare %>% group_by(gender) %>%
summarise(mean(income,na.rm=T)) %>%
ggplot(aes(gender,mean))+geom_col()
welfare %>% group_by(gender) %>%
summarise(mean=mean(income,na.rm=T)) %>%
ggplot(aes(gender,mean))+geom_col()
welfare %>% group_by(gender) %>%
summarise(mean=mean(income,na.rm=T)) %>%
ggplot(aes(gender,mean,fill=gender))+geom_col()
welfare %>% select(gender,income) %>%
ggplot(aes(gender,income,color=gender))+geom_density()
welfare %>% select(gender,income) %>%
ggplot(aes(gender,income,color=gender))+geom_density()
welfare %>% select(gender,income) %>%
ggplot(aes(income,color=gender))+geom_density()
# 연령별 임금 구하기
range(welfare$birth)
welfare$age=2015-welfare$birth
welfare$age
welfare
welfare %>% filter(age >= 20) %>%
group_by(age,income) %>%
summarise(mean_income = income/age) %>%
ggplot(aes(age,mean_income))+geom_line()
welfare %>% filter(age >= 20) %>%
group_by(age,income) %>%
summarise(mean_income = income/age) %>%
ggplot(aes(age,mean_income))+geom_line()
welfare %>% filter(age >= 20) %>%
group_by(age,income) %>%
summarise(mean_income = income/age) %>%
ggplot(aes(age,mean_income))+geom_density()
welfare %>% filter(age >= 20) %>%
group_by(age,income) %>%
summarise(mean_income = income/age) %>%
ggplot(aes(age,mean_income))+geom_line()
welfare %>% filter(age >= 20) %>%
group_by(age,income) %>%
summarise(mean_income = mean(income,na.rm=T)) %>%
ggplot(aes(age,mean_income))+geom_line()
welfare %>% filter(age >= 20) %>%
group_by(age) %>%
summarise(mean_income = mean(income,na.rm=T)) %>%
ggplot(aes(age,mean_income))+geom_line()
airquality %>% filter(Month >=6 & Month <= 8) %>%
ggplot(aes(x= Ozone,y= Temp,color = factor(Month)))+geom_fre()
airquality %>% filter(Month >=6 & Month <= 8) %>%
ggplot(aes(x= Ozone,y= Temp,color = factor(Month)))+geom_freqpoly()
welfare %>% filter(age >= 20) %>%
group_by(age) %>%
summarise(mean_income = mean(income,na.rm=T)) %>%
ggplot(aes(age,mean_income))+geom_freqpoly()
welfare %>% filter(age >= 20) %>%
group_by(age) %>%
summarise(mean_income = mean(income,na.rm=T)) %>%
ggplot(aes(age,mean_income))+geom_freqpoly()
welfare %>% filter(age >= 20) %>%
group_by(age) %>%
summarise(mean_income = mean(income,na.rm=T)) %>%
ggplot(aes(age,mean_income))+geom_line()
welfare %>% filter(age >= 20) %>%
group_by(age,gender) %>%
summarise(mean_income = mean(income,na.rm=T)) %>%
ggplot(aes(age,mean_income,color=gender))+geom_line()
# 나이에 따른 소득
welfare <- welfare %>%
mutate(age_gen = ifelse(age < 30,"young",
ifelse(age<= 50,"middle","old")))
welfare
welfare %>% group_by(age_gen) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(age_gen,mean_income,fill=age_gen)) %>%
geom_col()
welfare %>% group_by(age_gen) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(age_gen,mean_income,fill=age_gen)) %>%
geom_col()
welfare %>% group_by(age_gen) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(x = age_gen,y = mean_income,fill=age_gen)) %>%
geom_col()
welfare %>% group_by(age_gen) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(x = age_gen,y = mean_income,fill=age_gen))+geom_col
welfare %>% group_by(age_gen) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(x = age_gen,y = mean_income,fill=age_gen))+geom_col()
welfare %>% group_by(age_gen) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(x = age_gen,y = mean_income,fill=age_gen))+
geom_col()+scale_x_discrete(limits=c("young","middle","old"))
welfare %>% group_by(age_gen,gender) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(x = age_gen,y = mean_income,fill=gender))+
geom_col()+scale_x_discrete(limits=c("young","middle","old"))
welfare %>% group_by(age_gen,gender) %>%
summarise(mean_income = mean(income,na.rm = T)) %>%
ggplot(aes(x = age_gen,y = mean_income,fill=gender))+
geom_col(position = "dodge")+scale_x_discrete(limits=c("young","middle","old"))
install.packages("multilinguer")
multilinguer::install_jdk()
multilinguer::install_jdk()
# 데이터 가공
install.packages("dplyr") # d ply r :디플라이어
library(dplyr)
library(readxl)
df_exam = read_excel("excel_exam.xlsx")
df_exam[df_exam$class=="1",] # 행의 조건을 df_exam의 class 1
filter(df_exam,class == 1) # filter를 이용한 방법
filter(df_exam,class == 2) # 2반
filter(df_exam,class != 1) # 1반이 아닌것
filter(df_exam,class==1 | class==2)# 1반 아니면 2반
filter(df_exam,math >= 50 & english>=80)
# filter(): 행추출 (행이 줄어든다)
# 1,2,3 반에 해당하면 추출
df_exam %>%
filter(class == 1|class == 2|class == 3)
df_exam %>% # %in% 으로도 표현가능
filter(class %in% c(1,2,3))
# select() 열 추출
select(df_exam, math, english, science)
# 파이프 응용
df_exam %>%
select(math,english,science)
df_exam %>% # math 제외
select(-math)
df_exam %>%
filter(class == 1) %>% # class가 1인 행 추출
select(class,math) # english,math 열 추출
# 상자 그림 통계치 출력
library(ggplot2)
boxplot(mpg$hwy)
boxplot(mpg$cty)
boxplot(mpg$manufacturer) # 숫자가 아니라 출력 불가
str(mpg)
# 12~37 벗어나면 NA 할당
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37 , NA, mpg$hwy)
table(is.na(mpg$hwy))
# 구동방식(drv)별로 고속도로 주행연비(hwy)의 평균을 구하세요.
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
# filter를 이용해도 된다
mpg %>%filter(!is.na(hwy)) %>%
group_by(drv) %>% summarise(mean(hwy))
# filter를 이용해도 된다
mpg %>%filter(!is.na(hwy)) %>%
group_by(drv) %>% summarise(mean(hwy))
library(dplyr)
library(ggplot2)
ggplot(data = mpg, aes(x = displ, y= hwy)) +
geom_point() +
xlim(3,6)+ # x축 범위 3~6으로 지정
ylim(20,30) # y축 범위 10~30으로 지정
ggplot(data = mpg, aes(x = displ, y = hwy))+geom_point() #num, num
ggplot(data = mpg, aes(x = displ, y = cty))+geom_point() #num, num
ggplot(data = mpg, aes(x = displ, y = fl))+geom_point() #num, char
ggplot(data = mpg, aes(x = drv, y = fl))+geom_point() #char, char
ggplot(data = mpg, aes(x = displ, y= hwy)) +
geom_point() +
xlim(3,6)+ # x축 범위 3~6으로 지정
ylim(20,30) # y축 범위 10~30으로 지정
ggplot(data = mpg, aes(x = displ, y= hwy, color = drv )) + geom_point() # 색상이 범주형
ggplot(data = mpg, aes(x = displ, y= hwy, color = year )) + geom_point() #색상이 연속형(int)
ggplot(data = mpg, aes(x = displ, y= hwy, color = drv )) +
geom_point(size = 3, aes(color = "drv"))
ggplot(data = mpg, aes(x = displ, y= hwy, color = drv )) +
geom_point(size = 3, color = "blue")
ggplot(data = mpg, aes(x = displ, y= hwy, color = drv )) +
geom_point(size = 3, aes(color = "drv"))
# mpg에서 파이프 형태로도 가능 )주의 data를 설정 안해도 됨
mpg %>% ggplot()+ geom_point(size = 2, aes(x = displ, y= hwy, color = drv))
# mpg에서 파이프 형태로도 가능 )주의 data를 설정 안해도 됨
mpg %>% ggplot()+ geom_point(size = 2, aes(x = displ, y= hwy, color = drv))
# bar 그래프는 변수가 x한개여야 됨
ggplot(data = mpg, aes(x = displ, color = drv )) + geom_bar()
# color는 테두리
ggplot(data = mpg, aes(x = drv, color = drv )) + geom_bar()
# bar 그래프는 변수가 x한개여야 됨
ggplot(data = mpg, aes(x = displ, color = drv )) + geom_bar()
# color는 테두리
ggplot(data = mpg, aes(x = drv, color = drv )) + geom_bar()
# fill은 채우기
ggplot(data = mpg, aes(x = drv, fill = drv )) + geom_bar()
# position("dodge")는 중첩된 그래프를 분리해서 보여준다
ggplot(data = mpg, aes(x = drv, fill = fl )) + geom_bar(position = "dodge")
ggplot(data = mpg, aes(x = drv)) + geom_bar()
ggplot(data = mpg, aes(x = model)) + geom_bar()
ggplot(data = mpg, aes(x = cty)) + geom_bar()
ggplot(data = mpg, aes(x = year)) + geom_bar()
# shape는 모양을 바꾼다
ggplot(mpg, aes(x = cty, y = hwy)) +
geom_point(alpha = 0.9, color = "blue", size = 3, shape = 22)
p
ggplot(mpg, aes(x = cty, y = hwy)) + geom_label(color = "blue")
ggplot(mpg, aes(x = cty, y = hwy)) + geom_quantile(color = "blue")
ggplot(mpg, aes(x = cty, y = hwy)) + geom_rug(sides = "bl")
ggplot(mpg, aes(x = cty, y = hwy)) + geom_smooth(method = "lm")
# discrete x, continuous y
ggplot(mpg, aes(x=class)) + geom_bar()
# col은 원소가 하나인 bar와 다르게 두개가 있어야 한다
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + geom_col()
# boxplot은 상자 형태로 그린다
ggplot(mpg, aes(x=class, y=hwy, fill=class)) + geom_boxplot()
ggplot(mpg, aes(x=class, y=hwy, fill=drv)) +
geom_dotplot(binaxis = "y",stackdir = "center")
ggplot(mpg, aes(x=class, y=hwy, fill=class)) +
geom_violin(scale = "area")
c + geom_density()
# ONE VARIABLE continuous
c <- ggplot(mpg, aes(hwy))
# density
c + geom_density()
c + geom_area(stat = "bin")
# dotplot
c + geom_dotplot(binwidth =  2)+
scale_fill_gradient(low = "red",high = "yellow")
# freqpoly
c + geom_freqpoly()
c + geom_histogram(bins = 8,color ="white", fill = "steelblue")
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv))+
geom_point(size = 3)
# shape 추가 (모양)
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)
# smooth 추가 (음영추가)
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
geom_smooth()
# method 추가 (선 교정)
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
geom_smooth(method = "lm") # linear model
# theme 추가
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
geom_smooth(method = "lm")+
theme_minimal()
# theme_economist() 증권사 배경추가
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_economist()
# theme_economist() 증권사 배경추가
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_economist()
library(ggthemes)
# theme_economist() 증권사 배경추가
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_economist()
# theme_wsj() Wall Street Journal 배경 추가
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_wsj()
# theme_solarized() Solarized palette 배경 추가
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_solarized()
# theme_hc() Highcharts 배경
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_hc()+
# theme_hc() Highcharts 배경
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_hc()+
ggtitle("배기량과 고속도로 주행연비의 관계") # 제목 추가
# theme_hc() Highcharts 배경
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_hc()+
ggtitle("배기량과 고속도로 주행연비의 관계") # 제목 추가
# lab을 이용하여 제목,범례 수정
ggplot(data = mpg, aes(x = displ, y = hwy, color = drv, shape = drv))+
geom_point(size = 3)+
theme_hc()+
labs(title = "배기량과 고속도로 주행연비의 관계",
x= "배기량", y= "연비") + theme(title = element_text(size = 30))
# facet:그래프 분할
# facet_grid
d <- ggplot(mpg, aes(x=displ, y=hwy, color= drv))+
geom_point()
d + facet_grid(drv ~ .)
d + facet_grid(. ~ cyl)
d + facet_grid(drv ~ cyl)
# facet_wrap 행또는 열이 많아지면 wrap
d + facet_grid(~ class)
d + facet_wrap(~ class)
d + facet_wrap(~ drv)
d + facet_wrap(~ class, nrow = 2)
d + facet_wrap(~ class, ncol = 4)
# jitter 많이 겹쳐있는 정도를 보여주는 명령어
ggplot(mpg, aes(x=displ, y=hwy, color= drv))+
geom_point(size=3, position = "jitter")
# geom_jitter로도 활용가능
ggplot(mpg, aes(x=displ, y=hwy, color= drv))+
geom_point(size=3)+
geom_jitter(width = 0.5, height = 0.5)
# line
p1 <- ggplot(mpg, aes(x=displ, y=hwy, color= drv))
p1 + geom_line() # 선긋기만 그리기
ggplot(data=mpg, aes(x= displ, fill = drv)) + geom_bar()+
facet_wrap( ~ drv) # facet_wrap 으로 분리
# histogram
ggplot(data=mpg, aes(x= displ)) + geom_histogram(bins = 60)
ggplot(data=mpg, aes(x= displ)) + geom_histogram(bins = 10, color = "white")+
geom_freqpoly(bins = 10, color = "red", size = 3) # histogram 위에 선긋기
ggplot(data=mpg, aes(x= displ)) + geom_histogram(binwidth = 1, color = "white")
mpg %>% select(manufacturer,model,hwy) %>%
arrange(desc(hwy)) %>% head()
mpg %>% select(manufacturer,model,hwy) %>%
arrange(hwy) %>% head()
mpg %>% select(manufacturer,model,hwy,drv) %>%
filter(drv == "f") %>%
arrange(hwy) %>% head(20)
ggplot(data = mpg, aes(x=drv, y=hwy)) + geom_point()
ggplot(data = mpg, aes(x=drv, y=hwy, color = hwy)) +
geom_point()
p <- ggplot(economics, aes(date, unemploy / pop))+
geom_line()
ggplot(economics, aes(date, unemploy))+
geom_line()
library(plotly)
# plots 가 아닌 Viewer로 보여줌
ggplotly(p)
ggplotly(ggplot(mpg, aes(x=displ, y=hwy, color = drv))+ geom_point())
ggplotly(ggplot(mpg, aes(x=displ, y=hwy, color = drv))+ geom_point())
ggplot(mpg, aes(x=displ)) + geom_histogram(fill='blue', binwidth = 0.2)
ggplot(mpg, aes(x =class,fill = class)) + geom_bar()+
ggtitle("클래스별 차종")+
theme(legend.position = "none")
score1 <- data.frame(id = c("a","b","c","d","e"),
math = c(30,45,89,90,100))
score2 <- data.frame(id = c("a","b","f","g","h"),
english = c(55,80,65,88,95))
inner_join(score1,score2)
left_join(score1,score2)
right_join(score1,score2)
full_join(score1,score2)
names(diamonds)
ggplot(dia,aes(cut,fill=clarity)) +geom_bar()
ggplot(dia, aes(cut, fill=clarity)) + geom_bar()
ggplot(dia,aes(x=cut,fill=clarity))+geom_bar(position = "dodge")
ggplot(dia,aes(x=carat,color=cut))+geom_freqpoly(bins = 60)
library(KoNLP)
library(wordcloud2)
library(ggplot2)
useSejongDic()
# 파일 읽기
text = readLines("jeonduhwan.txt",encoding = "UTF-8")
# 파일속 단어 나누기
nouns <-  extractNoun(text)
typeof(nouns)
install.packages("multilinguer")
install.packages("multilinguer")
multilinguer::install_jdk()
install.packages("KoNLP",
repos = c("https://forkonlp.r-universe.dev",
"https://cloud.r-project.org"),
INSTALL_opts = c("--no-multiarch")
)
library(KoNLP)
library(wordcloud2)
library(ggplot2)
useSejongDic()
# 파일 읽기
text = readLines("jeonduhwan.txt",encoding = "UTF-8")
# 파일속 단어 나누기
nouns <-  extractNoun(text)
typeof(nouns)
# unlist화 시킨후 한자릿수 단어 지우기
nouns <- unlist(nouns)
nouns <- nouns[nchar(nouns) >= 2]
# table로 저장하고 sort로 정렬하기
wordFreq <- table(nouns)
wordFreq <- head(sort(wordFreq,decreasing = T), 25)
# table로 저장하고 sort로 정렬하기
wordFreq <- table(nouns)
wordFreq <- head(sort(wordFreq,decreasing = T), 25)
# wordCloud로 표현
wordcloud2(wordFreq)
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >= 2]
words <- table(nouns) %>% sort(decreasing = T) %>% head(25)
wordcloud2(words, fontFamily = "나눔고딕")
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >1] %>%
table() %>% sort(decreasing = T) %>%
head(20) %>% wordcloud2()
# 파일 읽기
text = readLines("jeonduhwan.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >= 2]
words <- table(nouns) %>% sort(decreasing = T) %>% head(25)
wordcloud2(words, fontFamily = "나눔고딕")
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >1] %>%
table() %>% sort(decreasing = T) %>%
head(20) %>% wordcloud2()
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
ggplot(data = words, aes(x= reorder(word,-Freq), y = Freq))+
geom_col() + theme(legend.position = "None")
ggplot(data = words, aes(x= reorder(word,Freq), y = Freq))+
geom_col() + theme(legend.position = "None")+
coord_flip()
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- extractNoun(text) %>% unlist()
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >1] %>%
table() %>% sort(decreasing = T) %>% head(20)
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
ggplot(data = words, aes(x= reorder(word,Freq), y = Freq,fill=word))+
geom_col() + theme(legend.position = "None")+
coord_flip()
library(ggplot2)
library(KoNLP)
library(wordcloud2)
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
library(dplyr)
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >1] %>%
table() %>% sort(decreasing = T) %>% head(20)
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
ggplot(data = words, aes(x= reorder(word,Freq), y = Freq,fill=word))+
geom_col() + theme(legend.position = "None")+
coord_flip()
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >= 2]
words <- table(nouns) %>% sort(decreasing = T) %>% head(25)
wordcloud2(words, fontFamily = "나눔고딕")
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >1] %>%
table() %>% sort(decreasing = T) %>%
head(20) %>% wordcloud2()
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
ggplot(data = words, aes(x= reorder(word,-Freq), y = Freq))+
geom_col() + theme(legend.position = "None")
ggplot(data = words, aes(x= reorder(word,Freq), y = Freq))+
geom_col() + theme(legend.position = "None")+
coord_flip()
text <- readLines("kimdaejung.txt",encoding = "UTF-8")
nouns <- extractNoun(text) %>% unlist()
nouns <- nouns[nchar(nouns) >1] %>%
table() %>% sort(decreasing = T) %>%
head(20) %>% wordcloud2()
words <- data.frame(nouns)
# 파일 읽기
text = readLines("jeonduhwan.txt",encoding = "UTF-8")
words <- data.frame(nouns)
# unlist화 시킨후 한자릿수 단어 지우기
nouns <- unlist(nouns)
nouns <- nouns[nchar(nouns) >= 2]
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
ggplot(data = words, aes(x= reorder(word,-Freq), y = Freq))+
geom_col() + theme(legend.position = "None")
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
# 파일 읽기
text = readLines("jeonduhwan.txt",encoding = "UTF-8")
# 파일속 단어 나누기
nouns <-  extractNoun(text)
words <- data.frame(nouns)
names(words)[1] <- "word"
words %>% arrange(desc(Freq)) %>%
filter(Freq > 5)
